<?php

declare(strict_types=1);

namespace Michaelgrunder\RedisClientCompare\Console\Command;

use Michaelgrunder\RedisClientCompare\Logger\ExceptionFormatter;
use Michaelgrunder\RedisClientCompare\Runner\CommandRunner;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command as SymfonyCommand;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand(
    name: 'commands:run',
    description: 'Execute a command set against a Redis instance and capture the results.'
)]
final class RunCommandsCommand extends SymfonyCommand
{
    protected function configure(): void
    {
        $this
            ->addArgument('input', InputArgument::REQUIRED, 'Path to the JSONL command file generated by gen-commands.')
            ->addArgument('output', InputArgument::REQUIRED, 'Path where the execution output should be stored.')
            ->addArgument('host', InputArgument::OPTIONAL, 'Redis host to target.', '127.0.0.1')
            ->addArgument('port', InputArgument::OPTIONAL, 'Redis port to target.', 6379)
            ->addOption('aggregate', null, InputOption::VALUE_NONE, 'Aggregate results for identical command sequences.')
            ->addOption('cluster', null, InputOption::VALUE_NONE, 'Run the commands using cluster mode.');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);

        $commandsFile = (string) $input->getArgument('input');
        $outputFile = (string) $input->getArgument('output');
        $host = (string) $input->getArgument('host');
        $port = (int) $input->getArgument('port');
        $aggregate = (bool) $input->getOption('aggregate');
        $cluster = (bool) $input->getOption('cluster');

        if ($port < 1) {
            $io->error('The port must be a positive integer.');
            return SymfonyCommand::INVALID;
        }

        try {
            (new CommandRunner())->run($commandsFile, $outputFile, $host, $port, $aggregate, $cluster);
        } catch (\Throwable $exception) {
            $io->error(ExceptionFormatter::format($exception));
            return SymfonyCommand::FAILURE;
        }

        $io->success(sprintf('Finished executing commands. Results stored in %s', $outputFile));

        return SymfonyCommand::SUCCESS;
    }
}
