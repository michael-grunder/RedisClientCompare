#!/usr/bin/env php
<?php

declare(strict_types=1);

use Michaelgrunder\RedisClientCompare\Command\Command;
use Michaelgrunder\RedisClientCompare\Generator\CommandFileGenerator;
use Michaelgrunder\RedisClientCompare\Logger\ExceptionFormatter;

require __DIR__ . '/../vendor/autoload.php';

$args = $argv;
array_shift($args);

$keyCardinality = Command::DEFAULT_KEY_CARDINALITY;
$memberCardinality = Command::DEFAULT_MEMBER_CARDINALITY;
$includeExpirationCommands = false;
$clusterMode = false;
$commandFilterMap = [];

while ($args !== [] && str_starts_with((string) ($args[0] ?? ''), '--')) {
    $option = (string) array_shift($args);
    if ($option === '--') {
        break;
    }

    $value = null;
    if (strpos($option, '=') !== false) {
        [$name, $value] = explode('=', $option, 2);
    } else {
        $name = $option;
    }

    switch ($name) {
        case '--keys':
            $value = $value ?? ($args[0] ?? null);
            if ($value === null) {
                fwrite(STDERR, "--keys requires a value\n");
                usage();
                exit(2);
            }
            if ($value === ($args[0] ?? null) && $value !== null) {
                array_shift($args);
            }
            $keyCardinality = (int) $value;
            break;
        case '--members':
            $value = $value ?? ($args[0] ?? null);
            if ($value === null) {
                fwrite(STDERR, "--members requires a value\n");
                usage();
                exit(2);
            }
            if ($value === ($args[0] ?? null) && $value !== null) {
                array_shift($args);
            }
            $memberCardinality = (int) $value;
            break;
        case '--include-expiration':
            $includeExpirationCommands = true;
            break;
        case '--cluster':
            $clusterMode = true;
            break;
        case '--commands':
            $value = $value ?? ($args[0] ?? null);
            if ($value === null) {
                fwrite(STDERR, "--commands requires a value\n");
                usage();
                exit(2);
            }
            if ($value === ($args[0] ?? null) && $value !== null) {
                array_shift($args);
            }

            $filters = extractCommandFilters((string) $value);
            if ($filters === []) {
                fwrite(STDERR, "--commands requires at least one non-empty pattern\n");
                usage();
                exit(2);
            }

            foreach ($filters as $filter) {
                $commandFilterMap[strtoupper($filter)] = $filter;
            }
            break;
        default:
            fwrite(STDERR, sprintf("Unknown option '%s'\n", $name));
            usage();
            exit(2);
    }
}

$commandFilters = array_values($commandFilterMap);

if ($keyCardinality < 1) {
    fwrite(STDERR, "--keys must be >= 1\n");
    exit(2);
}

if ($memberCardinality < 1) {
    fwrite(STDERR, "--members must be >= 1\n");
    exit(2);
}

if (count($args) < 2) {
    usage();
    exit(2);
}

$count = (int) array_shift($args);
$outputFile = (string) array_shift($args);

try {
    (new CommandFileGenerator())->generate(
        $count,
        $outputFile,
        $keyCardinality,
        $memberCardinality,
        $includeExpirationCommands,
        $clusterMode,
        $commandFilters
    );
} catch (Throwable $exception) {
    fwrite(STDERR, ExceptionFormatter::format($exception) . PHP_EOL);
    exit(1);
}

function usage(): void
{
    fwrite(
        STDERR,
        "Usage: gen-commands [--keys=<n>] [--members=<n>] [--include-expiration] [--cluster] [--commands=pattern[,pattern...]] <count> <out.jsonl>\n"
    );
}

/**
 * @return list<string>
 */
function extractCommandFilters(string $value): array
{
    $parts = explode(',', $value);
    $filters = [];

    foreach ($parts as $part) {
        $candidate = trim($part);
        if ($candidate === '') {
            continue;
        }

        $candidate = trim($candidate, " \t\n\r\0\x0B'\"");
        if ($candidate === '') {
            continue;
        }

        $filters[] = $candidate;
    }

    return $filters;
}
