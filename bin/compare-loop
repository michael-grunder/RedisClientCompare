#!/usr/bin/env php
<?php

declare(strict_types=1);

use Michaelgrunder\RedisClientCompare\Logger\LoggerFactory;
use Psr\Log\LoggerInterface;

require __DIR__ . '/../vendor/autoload.php';

ini_set('display_errors', 'stderr');

$options = getopt('', [
    'old:',
    'new:',
    'iters::',
    'sleep::',
    'count::',
    'host::',
    'port::',
    'loglevel::',
]);

if (!isset($options['old'], $options['new'])) {
    usage();
    exit(2);
}

$phpOld = $options['old'];
$phpNew = $options['new'];
$iterations = (int) ($options['iters'] ?? 0);
$sleepSeconds = (int) ($options['sleep'] ?? 0);
$commandCount = (int) ($options['count'] ?? 200);
$host = $options['host'] ?? '127.0.0.1';
$port = (int) ($options['port'] ?? 6379);
$logLevel = normalizeLogLevel((string) ($options['loglevel'] ?? 'info'));

try {
    $logger = LoggerFactory::create($logLevel);
} catch (Throwable $exception) {
    fwrite(STDERR, sprintf("Invalid log level '%s'\n", $logLevel));
    exit(2);
}

$generator = __DIR__ . '/gen-commands';
$runner = __DIR__ . '/run-commands';
$comparator = __DIR__ . '/compare-outputs';

$oldVersion = getRedisVersion($phpOld);
$newVersion = getRedisVersion($phpNew);

foreach ([$generator, $runner, $comparator] as $binary) {
    if (!is_file($binary)) {
        logError('Missing binary', ['path' => $binary]);
        logSummary('missing-binary', 0, 0, microtime(true));
        exit(2);
    }
}

$workDir = buildWorkDir();
register_shutdown_function(static function () use ($workDir): void {
    $iterator = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($workDir, FilesystemIterator::SKIP_DOTS),
        RecursiveIteratorIterator::CHILD_FIRST
    );

    foreach ($iterator as $file) {
        $filename = $file->getPathname();
        $file->isDir() ? @rmdir($filename) : @unlink($filename);
    }

    @rmdir($workDir);
});

logInfo(
    'Loop start',
    [
        'old' => $phpOld,
        'new' => $phpNew,
        'redis' => sprintf('%s->%s', $oldVersion ?: 'N/A', $newVersion ?: 'N/A'),
        'batch' => number_format($commandCount),
        'iters' => $iterations > 0 ? number_format($iterations) : 'âˆž',
    ]
);

$iteration = 0;
$totalRuns = 0;
$totalCommands = 0;
$startTime = microtime(true);
while (true) {
    if ($iterations > 0 && $iteration >= $iterations) {
        logSummary('completed', $totalRuns, $totalCommands, $startTime);
        exit(0);
    }

    $commandsFile = sprintf('%s/cmds.%d.jsonl', $workDir, $iteration);
    $outputOld = sprintf('%s/out_old.%d.jsonl', $workDir, $iteration);
    $outputNew = sprintf('%s/out_new.%d.jsonl', $workDir, $iteration);
    $iterationStart = microtime(true);

    logInfo('Iter start', [
        'iter' => number_format($iteration),
        'batch' => number_format($commandCount),
    ]);

    $cmd = sprintf(
        '%s %s %d %s',
        escapeshellarg(PHP_BINARY),
        escapeshellarg($generator),
        $commandCount,
        escapeshellarg($commandsFile)
    );
    $generatorResult = runCommand($cmd);
    if ($generatorResult['code'] !== 0) {
        logError(
            'gen-commands failed',
            array_merge(
                ['iter' => number_format($iteration)],
                commandFailureContext($cmd, $generatorResult)
            )
        );
        logSummary('gen-commands-failed', $totalRuns, $totalCommands, $startTime);
        exit(3);
    }

    $cmd = sprintf(
        '%s %s %s %s %s %d',
        escapeshellarg($phpOld),
        escapeshellarg($runner),
        escapeshellarg($commandsFile),
        escapeshellarg($outputOld),
        escapeshellarg($host),
        $port
    );
    $oldRunnerResult = runCommand($cmd);
    if ($oldRunnerResult['code'] !== 0) {
        logError(
            'run-commands failed',
            array_merge(
                [
                    'bin' => 'php-old',
                    'iter' => number_format($iteration),
                ],
                commandFailureContext($cmd, $oldRunnerResult)
            )
        );
        logSummary('run-commands-failed', $totalRuns, $totalCommands, $startTime);
        exit(4);
    }

    $cmd = sprintf(
        '%s %s %s %s %s %d',
        escapeshellarg($phpNew),
        escapeshellarg($runner),
        escapeshellarg($commandsFile),
        escapeshellarg($outputNew),
        escapeshellarg($host),
        $port
    );
    $newRunnerResult = runCommand($cmd);
    if ($newRunnerResult['code'] !== 0) {
        logError(
            'run-commands failed',
            array_merge(
                [
                    'bin' => 'php-new',
                    'iter' => number_format($iteration),
                ],
                commandFailureContext($cmd, $newRunnerResult)
            )
        );
        logSummary('run-commands-failed', $totalRuns, $totalCommands, $startTime);
        exit(5);
    }

    $cmd = sprintf(
        '%s %s %s %s',
        escapeshellarg(PHP_BINARY),
        escapeshellarg($comparator),
        escapeshellarg($outputOld),
        escapeshellarg($outputNew)
    );
    $compareResult = runCommand($cmd);
    $compareExitCode = $compareResult['code'];

    $totalRuns++;
    $totalCommands += $commandCount;

    if ($compareExitCode !== 0) {
        logError('Diff found', [
            'iter' => number_format($iteration),
            'cmdfile' => $commandsFile,
            'old' => $outputOld,
            'new' => $outputNew,
            'dur' => formatDuration(microtime(true) - $iterationStart),
            'command' => $cmd,
        ]);
        logSummary('difference-detected', $totalRuns, $totalCommands, $startTime);
        exit(1);
    }

    logInfo('Iter ok', [
        'iter' => number_format($iteration),
        'dur' => formatDuration(microtime(true) - $iterationStart),
        'runs' => number_format($totalRuns),
        'cmds' => number_format($totalCommands),
    ]);

    $iteration++;

    if ($sleepSeconds > 0) {
        sleep($sleepSeconds);
    }
}

function usage(): void
{
    fwrite(
        STDERR,
        <<<TXT
Usage: compare-loop --old=/path/php-old --new=/path/php-new
  [--iters=0] [--sleep=0] [--count=200] [--host=127.0.0.1] [--port=6379]
  [--loglevel=info]
TXT
    );
}

function getRedisVersion(string $phpBinary): string
{
    return trim((string) shell_exec(
        sprintf(
            '%s -r %s',
            escapeshellarg($phpBinary),
            escapeshellarg("echo phpversion('redis');")
        )
    ));
}

function buildWorkDir(): string
{
    $work = rtrim(sys_get_temp_dir(), DIRECTORY_SEPARATOR) .
        DIRECTORY_SEPARATOR .
        'phpredis_diff_' .
        getmypid();

    if (!mkdir($work, 0700) && !is_dir($work)) {
        fwrite(STDERR, "Failed to mkdir {$work}\n");
        exit(2);
    }

    return $work;
}

/**
 * @return array{code:int, output:list<string>, duration:float}
 */
function runCommand(string $command): array
{
    logDebug('Executing command', ['command' => $command]);

    $start = microtime(true);
    exec($command . ' 2>&1', $output, $code);
    $duration = microtime(true) - $start;

    logDebug('Command completed', [
        'command' => $command,
        'exit_code' => (int) $code,
        'duration' => formatDuration($duration),
    ]);

    return [
        'code' => (int) $code,
        'output' => $output,
        'duration' => $duration,
    ];
}

function logInfo(string $message, array $context = []): void
{
    logger()->info($message, $context);
}

function logDebug(string $message, array $context = []): void
{
    logger()->debug($message, $context);
}

function logError(string $message, array $context = []): void
{
    logger()->error($message, $context);
}

function logSummary(string $status, int $totalRuns, int $totalCommands, float $startTime): void
{
    logInfo('Summary', [
        'status' => $status,
        'runs' => number_format($totalRuns),
        'cmds' => number_format($totalCommands),
        'time' => formatDuration(microtime(true) - $startTime),
    ]);
}

/**
 * @param array{code:int, output:list<string>, duration:float} $result
 * @return array<string,mixed>
 */
function commandFailureContext(string $command, array $result): array
{
    $context = [
        'command' => $command,
        'exit_code' => $result['code'],
        'duration' => formatDuration($result['duration']),
    ];

    $output = formatCommandOutput($result['output']);
    if ($output !== '') {
        $context['output'] = $output;
    }

    return $context;
}

/**
 * @param list<string> $lines
 */
function formatCommandOutput(array $lines): string
{
    if ($lines === []) {
        return '';
    }

    $normalized = array_values(
        array_filter(
            array_map(static fn(string $line): string => trim($line), $lines),
            static fn(string $line): bool => $line !== ''
        )
    );

    if ($normalized === []) {
        $normalized = $lines;
    }

    $maxLines = 5;
    $selected = array_slice($normalized, 0, $maxLines);
    $output = implode(' | ', $selected);

    $remaining = count($normalized) - count($selected);
    if ($remaining > 0) {
        $output .= sprintf(' (and %d more lines)', $remaining);
    }

    return $output;
}

function normalizeLogLevel(string $level): string
{
    $normalized = strtolower($level);

    $aliases = [
        'warn' => 'warning',
        'err' => 'error',
        'crit' => 'critical',
        'fatal' => 'critical',
        'panic' => 'alert',
        'trace' => 'debug',
    ];

    return $aliases[$normalized] ?? $normalized;
}

function formatDuration(float $seconds): string
{
    if ($seconds < 0) {
        $seconds = 0.0;
    }

    if ($seconds < 1) {
        return sprintf('%dms', (int) round($seconds * 1000));
    }

    $parts = [];

    $hours = (int) floor($seconds / 3600);
    if ($hours > 0) {
        $parts[] = $hours . 'h';
        $seconds -= $hours * 3600;
    }

    $minutes = (int) floor($seconds / 60);
    if ($minutes > 0) {
        $parts[] = $minutes . 'm';
        $seconds -= $minutes * 60;
    }

    $seconds = round($seconds, 2);
    $parts[] = sprintf('%0.2fs', $seconds);

    return implode('', $parts);
}

function logger(): LoggerInterface
{
    /** @var LoggerInterface $logger */
    global $logger;

    return $logger;
}
